import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import joblib
import os

# ==============================
# CONFIGURACI√ìN INICIAL
# ==============================
st.set_page_config(page_title="üìä Dashboard Tribol√≥gico CAEX", layout="wide")
st.title("üìä Dashboard de An√°lisis Predictivo Tribol√≥gico")
st.markdown("### Flota de Camiones CAEX - Divisi√≥n Radomiro Tomic")

# Rutas
DATA_PATH = "data/datos_generados_Disponibilidad.parquet"
MODEL_PATH = "data/modelo_entrenado.joblib"
FEATURES_PATH = "data/feature_names.joblib"

# ==============================
# CARGA DE DATOS Y MODELO
# ==============================
@st.cache_data(ttl=60)
def cargar_datos():
    try:
        df_datos = pd.read_parquet(DATA_PATH)
        return df_datos
    except Exception as e:
        st.error(f"‚ùå Error al cargar los datos: {e}")
        return pd.DataFrame()

@st.cache_resource
def cargar_modelo():
    if os.path.exists(MODEL_PATH) and os.path.exists(FEATURES_PATH):
        try:
            modelo = joblib.load(MODEL_PATH)
            feature_names = joblib.load(FEATURES_PATH)
            return modelo, feature_names
        except Exception as e:
            st.warning(f"‚ö†Ô∏è No se pudo cargar el modelo: {e}")
    else:
        st.warning("‚ö†Ô∏è Archivos del modelo no encontrados.")
    return None, None

# Cargar datos y modelo
df_datos = cargar_datos()
modelo, feature_names = cargar_modelo()
modelo_disponible = modelo is not None

# ==============================
# FILTROS INTERACTIVOS
# ==============================
st.sidebar.header("üîé Filtros de Datos")

marca_filtro = st.sidebar.multiselect(
    "Marca",
    options=df_datos["Marca"].unique() if not df_datos.empty else [],
    default=df_datos["Marca"].unique() if not df_datos.empty else []
)

componente_filtro = st.sidebar.multiselect(
    "Componente",
    options=df_datos["Componente"].unique() if not df_datos.empty else [],
    default=df_datos["Componente"].unique() if not df_datos.empty else []
)

criticidad_filtro = st.sidebar.multiselect(
    "Nivel de Criticidad",
    options=["Critico", "Atencion", "Normal"],
    default=["Critico", "Atencion", "Normal"]
)

# Aplicar filtros
if not df_datos.empty:
    df_filtrado = df_datos[
        df_datos["Marca"].isin(marca_filtro) &
        df_datos["Componente"].isin(componente_filtro) &
        df_datos["Criticidad"].isin(criticidad_filtro)
    ]
else:
    df_filtrado = pd.DataFrame()

# Verificar si hay datos
if df_filtrado.empty:
    st.warning("‚ö†Ô∏è No hay datos que coincidan con los filtros seleccionados.")
    st.stop()

# ==============================
# INDICADORES CLAVE
# ==============================
st.markdown("## üîë Indicadores Clave")

metricas_actuales = {
    "Fallas Totales": len(df_filtrado[df_filtrado["Criticidad"] != "Normal"]),
    "Camiones Disponibles": len(df_filtrado[df_filtrado["Disponibilidad"] > 0.9]),
    "MTTR (horas)": round(df_filtrado["Tiempo Parada"].mean(), 2),
    "Tasa de Fallas": round(len(df_filtrado[df_filtrado["Criticidad"] == "Critico"]) / len(df_filtrado), 4),
    "MTBF (horas)": round(df_filtrado["TBF"].mean(), 2),
    "Confiabilidad (%)": round(df_filtrado["Confiabilidad"].mean(), 2)
}

col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("Fallas Totales", metricas_actuales["Fallas Totales"])
with col2:
    st.metric("Camiones Disponibles", metricas_actuales["Camiones Disponibles"])
with col3:
    st.metric("Tasa de Fallas", f"{metricas_actuales['Tasa de Fallas']:.4f}")
with col4:
    st.metric("Confiabilidad", f"{metricas_actuales['Confiabilidad (%)']:.2f}%")

# ==============================
# GR√ÅFICOS INTERACTIVOS
# ==============================
st.markdown("### üìâ Disponibilidad por Cami√≥n")
fig = px.line(
    df_filtrado.sort_values(by="flota"),
    x="flota",
    y="Disponibilidad",
    color="Marca",
    title="Disponibilidad por N√∫mero de Flota"
)
st.plotly_chart(fig, use_container_width=True)


st.markdown("### üìÖ Tendencia Diaria de Fallas")
df_filtrado["Fecha"] = pd.to_datetime(df_filtrado["Fecha"])
fallas_diarias = (
    df_filtrado[df_filtrado["Criticidad"] != "Normal"]
    .groupby(df_filtrado["Fecha"].dt.date)
    .size()
)
fig = px.line(
    x=fallas_diarias.index,
    y=fallas_diarias.values,
    title="Fallas Diarias",
    labels={"x": "Fecha", "y": "N√∫mero de Fallas"}
)
st.plotly_chart(fig, use_container_width=True)


st.markdown("## üìà Gr√°ficos de An√°lisis")

# Distribuci√≥n de criticidad
st.markdown("### üìä Distribuci√≥n de Criticidad")
criticidad_counts = df_filtrado["Criticidad"].value_counts()
color_map = {"Critico": "#d62728", "Atencion": "#ff7f0e", "Normal": "#2ca02c"}
fig = px.pie(
    names=criticidad_counts.index,
    values=criticidad_counts.values,
    title="Distribuci√≥n de Criticidad",
    color=criticidad_counts.index,
    color_discrete_map=color_map,
    hole=0.4
)
st.plotly_chart(fig, use_container_width=True)

# Hierro vs Viscosidad
st.markdown("### üß™ Hierro (ppm) vs Viscosidad")
fig = px.scatter(
    df_filtrado,
    x="Viscosidad 100¬∞C cSt(mm2/s)",
    y="Hierro (Fe) ppm",
    color="Criticidad",
    hover_data=["Marca", "Componente"],
    title="Hierro vs Viscosidad por Criticidad"
)
st.plotly_chart(fig, use_container_width=True)

# Disponibilidad por marca
st.markdown("### üöõ Disponibilidad Promedio por Marca")
fig = px.bar(
    df_filtrado.groupby("Marca")["Disponibilidad"].mean().reset_index(),
    x="Marca",
    y="Disponibilidad",
    color="Marca",
    title="Disponibilidad Promedio por Marca",
    range_y=[0, 1]
)
st.plotly_chart(fig, use_container_width=True)

# TBF por componente
st.markdown("### ‚è≥ TBF (Tiempo Entre Fallas) por Componente")
fig = px.box(
    df_filtrado,
    x="Componente",
    y="TBF",
    color="Marca",
    title="TBF por Componente y Marca"
)
st.plotly_chart(fig, use_container_width=True)

# ==============================
# PREDICCI√ìN ML
# ==============================
if modelo_disponible:
    st.sidebar.header("üß† Predicci√≥n de Criticidad")

    marca_pred = st.sidebar.selectbox("Marca", df_datos["Marca"].unique())
    componente_pred = st.sidebar.selectbox("Componente", df_datos["Componente"].unique())

    viscosidad_100 = st.sidebar.slider("Viscosidad 100¬∞C cSt", 10.0, 20.0, 15.0, step=0.1)
    hierro_ppm = st.sidebar.slider("Hierro (Fe) ppm", 0, 300, 50)
    agua_pct = st.sidebar.slider("Contenido de Agua %", 0.0, 1.0, 0.3)

    aceite_pred = df_datos[
        (df_datos["Marca"] == marca_pred) &
        (df_datos["Componente"] == componente_pred)
    ]["Aceite Lubricante"].iloc[0] if not df_datos.empty else "MOBIL DELVAC 15W40"

    input_df = pd.DataFrame([{
        "Marca": marca_pred,
        "Componente": componente_pred,
        "Aceite Lubricante": aceite_pred,
        "Viscosidad 100¬∞C cSt(mm2/s)": viscosidad_100,
        "Hierro (Fe) ppm": hierro_ppm,
        "Contenido de agua %": agua_pct
    }])

    if st.sidebar.button("Predecir Criticidad"):
       # input_encoded = pd.get_dummies(input_df).reindex(columns=feature_names, fill_value=0)
       # Guardar las columnas originales del input
        input_cat = input_df[["Marca", "Componente", "Aceite Lubricante"]]
        input_num = input_df.drop(["Marca", "Componente", "Aceite Lubricante"], axis=1)

        # Aplicar get_dummies solo al categ√≥rico
        input_cat_encoded = pd.get_dummies(input_cat)

        # Recombinar y reindexar seg√∫n las features usadas en entrenamiento
        input_encoded = pd.concat([input_num.reset_index(drop=True), input_cat_encoded.reset_index(drop=True)], axis=1)
        input_encoded = input_encoded.reindex(columns=feature_names, fill_value=0)
        prediccion = modelo.predict(input_encoded)
        st.sidebar.success(f"üîç Predicci√≥n: **{prediccion[0]}**")

# ==============================
# DATOS COMPLETOS (Colapsable)
# ==============================
with st.expander("üìã Ver Datos Completos"):
    st.dataframe(df_filtrado)

# ==============================
# FOOTER
# ==============================
st.markdown("---")
st.markdown("üìå *Datos simulados basados en informaci√≥n real operacional de Codelco - Divisi√≥n Radomiro Tomic*")